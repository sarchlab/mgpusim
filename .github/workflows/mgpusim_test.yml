
name: MGPUSim Test

on: [push, pull_request]

permissions:
  contents: read

jobs:
  # compile:
  #   name: Compile
  #   runs-on: Github-Large-1
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "stable"

  #     - name: Build
  #       run: go build ./...

  # lint:
  #   name: Lint
  #   runs-on: Github-Large-1
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "stable"

  #     - name: golangci-lint
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: "latest"
  #         args: --timeout=10m
  #         skip-cache: true

  evaluate_commit:
    name: Nvidia Simulator Evaluation
    runs-on: Github-Large-1
    # needs: [compile]

    env:
      TEST_ENV: 1
      MNT_BACKEND_HOST: ${{ secrets.MNT_BACKEND_HOST }}
      MNT_BACKEND_PORT: ${{ secrets.MNT_BACKEND_PORT }}
      MNT_BACKEND_TOKEN: ${{ secrets.MNT_BACKEND_TOKEN }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      S3_REGION: ${{ secrets.S3_REGION }}
      S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
      S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}

    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout mgpusim
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "stable"
      
      - name: Clone mnt-collector and checkout branch and build
        run: |
          git clone https://github.com/sarchlab/mnt-collector.git
          cd mnt-collector
          git checkout github_workflow
          go build
      
      - name: Create secrets.yaml from GitHub secrets
        run: |
          echo "Creating secrets.yaml in mnt-collector/etc"
          mkdir -p mnt-collector/etc
          echo "TEST_ENV: ${TEST_ENV}"
          echo "[Not important] MNT_BACKEND_PORT: ${MNT_BACKEND_PORT}"
          cat << EOF > mnt-collector/etc/secrets.yaml
          mnt-backend:
            host: ${MNT_BACKEND_HOST}
            port: ${MNT_BACKEND_PORT}
            base: /v1
            token: ${MNT_BACKEND_TOKEN}
          s3:
            bucket: ${S3_BUCKET}
            region: ${S3_REGION}
            access-key-id: ${S3_ACCESS_KEY_ID}
            secret-access-key: ${S3_SECRET_ACCESS_KEY}
          EOF

      - name: List Directory Contents
        run: ls -R

      - name: Get Commit Info
        id: commit_info
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
          echo "author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT

      - name: Run Evaluation Script
        id: eval
        run: |
          go build -o nvidia/eval/eval nvidia/eval/eval.go
          # SCORE=99999 # Simulated score
          SCORE=$(./nvidia/eval/eval)
          echo "score=$SCORE" >> $GITHUB_OUTPUT

      - name: Format and append evaluation result
        run: |
          SHA="${{ steps.commit_info.outputs.sha }}"
          SHORT_SHA="${SHA:0:7}"
          MSG="${{ steps.commit_info.outputs.message }}"
          SCORE="${{ steps.eval.outputs.score }}"
          AUTHOR="${{ steps.commit_info.outputs.author }}"

          # Extract commit_type and version
          if [[ "$MSG" =~ ^\[release\ v([0-9]+(\.[0-9]+)*)\] ]]; then
            COMMIT_TYPE="release"
            VERSION="v${BASH_REMATCH[1]}"
            # Remove the [release vX.X.X] part from message
            MSG="${MSG#*\] }"
          else
            COMMIT_TYPE="dev"
            VERSION=""
          fi

          # Compose the CSV line
          echo "$SHORT_SHA,$COMMIT_TYPE,$VERSION,$SCORE,\"$MSG\",$SHA,$AUTHOR" >> nvidia/eval/simulator_evaluation.csv

      - name: Commit results
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add nvidia/eval/simulator_evaluation.csv
          git commit -m "Add evaluation result for commit '${{ steps.commit_info.outputs.message }}' (${{ steps.commit_info.outputs.sha }})"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # unit_test:
  #   name: Unit Test
  #   runs-on: Github-Large-1
  #   needs: [compile, lint]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "stable"

  #     - name: Install Ginkgo
  #       run: go install github.com/onsi/ginkgo/v2/ginkgo

  #     - name: Unit Test
  #       run: ginkgo -r

  # deterministicity_test:
  #   name: Deterministicity Test
  #   runs-on: Github-Large-1
  #   needs: [unit_test]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: List Directory Contents
  #       run: ls -R

  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "stable"

  #     - name: Setup Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"

  #     - name: Run Deterministicity Test
  #       run: python test.py
  #       working-directory: amd/tests/deterministic/

  # single_gpu_acceptance_test:
  #   name: Single GPU Acceptance Test
  #   runs-on: Github-Large-1
  #   needs: [unit_test]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: List Directory Contents
  #       run: ls -R

  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "stable"

  #     - name: Run Single GPU Acceptance Test
  #       timeout-minutes: 60
  #       run: |
  #         go build
  #         ./acceptance -num-gpu=1
  #       working-directory: amd/tests/acceptance/

  # two_discrete_gpu_test:
  #   name: Two Discrete GPU Test
  #   runs-on: Github-Large-1
  #   needs: [single_gpu_acceptance_test]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: List Directory Contents
  #       run: ls -R

  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "stable"

  #     - name: Run Two Discrete GPU Test
  #       timeout-minutes: 60
  #       run: |
  #         go build
  #         ./acceptance -num-gpu=2 -no-unified-gpu -no-unified-memory
  #       working-directory: amd/tests/acceptance/

  # four_discrete_gpu_test:
  #   name: Four Discrete GPU Test
  #   runs-on: Github-Large-1
  #   needs: [single_gpu_acceptance_test]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
      
  #     - name: List Directory Contents
  #       run: ls -R

  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "stable"

  #     - name: Run Four Discrete GPU Test
  #       timeout-minutes: 60
  #       run: |
  #         go build
  #         ./acceptance -num-gpu=4 -no-unified-gpu -no-unified-memory
  #       working-directory: amd/tests/acceptance/

  # two_unified_gpu_test:
  #   name: Two Unified GPU Test
  #   runs-on: Github-Large-1
  #   needs: [single_gpu_acceptance_test]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
      
  #     - name: List Directory Contents
  #       run: ls -R

  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "stable"

  #     - name: Run Two Unified GPU Test
  #       timeout-minutes: 60
  #       run: |
  #         go build
  #         ./acceptance -num-gpu=2 -only-unified-gpu -no-unified-memory
  #       working-directory: amd/tests/acceptance/

  # four_unified_gpu_test:
  #   name: Four Unified GPU Test
  #   runs-on: Github-Large-1
  #   needs: [single_gpu_acceptance_test]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
      
  #     - name: List Directory Contents
  #       run: ls -R

  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "stable"

  #     - name: Run Four Unified GPU Test
  #       timeout-minutes: 60
  #       run: |
  #         go build
  #         ./acceptance -num-gpu=4 -only-unified-gpu -no-unified-memory
  #       working-directory: amd/tests/acceptance/
