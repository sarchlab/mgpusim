// Code generated by MockGen. DO NOT EDIT.
// Source: wfdispatcher.go
//
// Generated by this command:
//
//	mockgen -source wfdispatcher.go -destination mock_wfdispatcher_test.go -package cu
//

// Package cu is a generated GoMock package.
package cu

import (
	reflect "reflect"

	protocol "github.com/sarchlab/mgpusim/v4/amd/protocol"
	wavefront "github.com/sarchlab/mgpusim/v4/amd/timing/wavefront"
	gomock "go.uber.org/mock/gomock"
)

// MockWfDispatcher is a mock of WfDispatcher interface.
type MockWfDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWfDispatcherMockRecorder
	isgomock struct{}
}

// MockWfDispatcherMockRecorder is the mock recorder for MockWfDispatcher.
type MockWfDispatcherMockRecorder struct {
	mock *MockWfDispatcher
}

// NewMockWfDispatcher creates a new mock instance.
func NewMockWfDispatcher(ctrl *gomock.Controller) *MockWfDispatcher {
	mock := &MockWfDispatcher{ctrl: ctrl}
	mock.recorder = &MockWfDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWfDispatcher) EXPECT() *MockWfDispatcherMockRecorder {
	return m.recorder
}

// DispatchWf mocks base method.
func (m *MockWfDispatcher) DispatchWf(wf *wavefront.Wavefront, location protocol.WfDispatchLocation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DispatchWf", wf, location)
}

// DispatchWf indicates an expected call of DispatchWf.
func (mr *MockWfDispatcherMockRecorder) DispatchWf(wf, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchWf", reflect.TypeOf((*MockWfDispatcher)(nil).DispatchWf), wf, location)
}
