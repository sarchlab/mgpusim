// Code generated by MockGen. DO NOT EDIT.
// Source: alg.go
//
// Generated by this command:
//
//	mockgen -source alg.go -destination mock_alg.go -package dispatching -mock_names=algorithm=MockAlgorithm
//

// Package dispatching is a generated GoMock package.
package dispatching

import (
	reflect "reflect"

	kernels "github.com/sarchlab/mgpusim/v4/amd/kernels"
	resource "github.com/sarchlab/mgpusim/v4/amd/timing/cp/internal/resource"
	gomock "go.uber.org/mock/gomock"
)

// MockAlgorithm is a mock of algorithm interface.
type MockAlgorithm struct {
	ctrl     *gomock.Controller
	recorder *MockAlgorithmMockRecorder
	isgomock struct{}
}

// MockAlgorithmMockRecorder is the mock recorder for MockAlgorithm.
type MockAlgorithmMockRecorder struct {
	mock *MockAlgorithm
}

// NewMockAlgorithm creates a new mock instance.
func NewMockAlgorithm(ctrl *gomock.Controller) *MockAlgorithm {
	mock := &MockAlgorithm{ctrl: ctrl}
	mock.recorder = &MockAlgorithmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlgorithm) EXPECT() *MockAlgorithmMockRecorder {
	return m.recorder
}

// FreeResources mocks base method.
func (m *MockAlgorithm) FreeResources(location dispatchLocation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FreeResources", location)
}

// FreeResources indicates an expected call of FreeResources.
func (mr *MockAlgorithmMockRecorder) FreeResources(location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeResources", reflect.TypeOf((*MockAlgorithm)(nil).FreeResources), location)
}

// HasNext mocks base method.
func (m *MockAlgorithm) HasNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNext indicates an expected call of HasNext.
func (mr *MockAlgorithmMockRecorder) HasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockAlgorithm)(nil).HasNext))
}

// Next mocks base method.
func (m *MockAlgorithm) Next() dispatchLocation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(dispatchLocation)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockAlgorithmMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockAlgorithm)(nil).Next))
}

// NumWG mocks base method.
func (m *MockAlgorithm) NumWG() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumWG")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumWG indicates an expected call of NumWG.
func (mr *MockAlgorithmMockRecorder) NumWG() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumWG", reflect.TypeOf((*MockAlgorithm)(nil).NumWG))
}

// RegisterCU mocks base method.
func (m *MockAlgorithm) RegisterCU(cu resource.DispatchableCU) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCU", cu)
}

// RegisterCU indicates an expected call of RegisterCU.
func (mr *MockAlgorithmMockRecorder) RegisterCU(cu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCU", reflect.TypeOf((*MockAlgorithm)(nil).RegisterCU), cu)
}

// StartNewKernel mocks base method.
func (m *MockAlgorithm) StartNewKernel(info kernels.KernelLaunchInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartNewKernel", info)
}

// StartNewKernel indicates an expected call of StartNewKernel.
func (mr *MockAlgorithmMockRecorder) StartNewKernel(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNewKernel", reflect.TypeOf((*MockAlgorithm)(nil).StartNewKernel), info)
}
