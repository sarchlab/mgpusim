// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/mgpusim/v4/amd/timing/cp/internal/resource (interfaces: CUResourcePool,CUResource)

package dispatching

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sim "github.com/sarchlab/akita/v4/sim"
	kernels "github.com/sarchlab/mgpusim/v4/amd/kernels"
	resource "github.com/sarchlab/mgpusim/v4/amd/timing/cp/internal/resource"
)

// MockCUResourcePool is a mock of CUResourcePool interface.
type MockCUResourcePool struct {
	ctrl     *gomock.Controller
	recorder *MockCUResourcePoolMockRecorder
}

// MockCUResourcePoolMockRecorder is the mock recorder for MockCUResourcePool.
type MockCUResourcePoolMockRecorder struct {
	mock *MockCUResourcePool
}

// NewMockCUResourcePool creates a new mock instance.
func NewMockCUResourcePool(ctrl *gomock.Controller) *MockCUResourcePool {
	mock := &MockCUResourcePool{ctrl: ctrl}
	mock.recorder = &MockCUResourcePoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCUResourcePool) EXPECT() *MockCUResourcePoolMockRecorder {
	return m.recorder
}

// GetCU mocks base method.
func (m *MockCUResourcePool) GetCU(arg0 int) resource.CUResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCU", arg0)
	ret0, _ := ret[0].(resource.CUResource)
	return ret0
}

// GetCU indicates an expected call of GetCU.
func (mr *MockCUResourcePoolMockRecorder) GetCU(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCU", reflect.TypeOf((*MockCUResourcePool)(nil).GetCU), arg0)
}

// NumCU mocks base method.
func (m *MockCUResourcePool) NumCU() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumCU")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumCU indicates an expected call of NumCU.
func (mr *MockCUResourcePoolMockRecorder) NumCU() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumCU", reflect.TypeOf((*MockCUResourcePool)(nil).NumCU))
}

// RegisterCU mocks base method.
func (m *MockCUResourcePool) RegisterCU(arg0 resource.DispatchableCU) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCU", arg0)
}

// RegisterCU indicates an expected call of RegisterCU.
func (mr *MockCUResourcePoolMockRecorder) RegisterCU(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCU", reflect.TypeOf((*MockCUResourcePool)(nil).RegisterCU), arg0)
}

// MockCUResource is a mock of CUResource interface.
type MockCUResource struct {
	ctrl     *gomock.Controller
	recorder *MockCUResourceMockRecorder
}

// MockCUResourceMockRecorder is the mock recorder for MockCUResource.
type MockCUResourceMockRecorder struct {
	mock *MockCUResource
}

// NewMockCUResource creates a new mock instance.
func NewMockCUResource(ctrl *gomock.Controller) *MockCUResource {
	mock := &MockCUResource{ctrl: ctrl}
	mock.recorder = &MockCUResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCUResource) EXPECT() *MockCUResourceMockRecorder {
	return m.recorder
}

// DispatchingPort mocks base method.
func (m *MockCUResource) DispatchingPort() sim.Port {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchingPort")
	ret0, _ := ret[0].(sim.Port)
	return ret0
}

// DispatchingPort indicates an expected call of DispatchingPort.
func (mr *MockCUResourceMockRecorder) DispatchingPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchingPort", reflect.TypeOf((*MockCUResource)(nil).DispatchingPort))
}

// FreeResourcesForWG mocks base method.
func (m *MockCUResource) FreeResourcesForWG(arg0 *kernels.WorkGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FreeResourcesForWG", arg0)
}

// FreeResourcesForWG indicates an expected call of FreeResourcesForWG.
func (mr *MockCUResourceMockRecorder) FreeResourcesForWG(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeResourcesForWG", reflect.TypeOf((*MockCUResource)(nil).FreeResourcesForWG), arg0)
}

// ReserveResourceForWG mocks base method.
func (m *MockCUResource) ReserveResourceForWG(arg0 *kernels.WorkGroup) ([]resource.WfLocation, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveResourceForWG", arg0)
	ret0, _ := ret[0].([]resource.WfLocation)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ReserveResourceForWG indicates an expected call of ReserveResourceForWG.
func (mr *MockCUResourceMockRecorder) ReserveResourceForWG(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveResourceForWG", reflect.TypeOf((*MockCUResource)(nil).ReserveResourceForWG), arg0)
}
