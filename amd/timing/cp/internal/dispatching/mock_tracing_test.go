// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/akita/v4/tracing (interfaces: NamedHookable)
//
// Generated by this command:
//
//	mockgen -destination mock_tracing_test.go -package dispatching -write_package_comment=false github.com/sarchlab/akita/v4/tracing NamedHookable
//

package dispatching

import (
	reflect "reflect"

	sim "github.com/sarchlab/akita/v4/sim"
	gomock "go.uber.org/mock/gomock"
)

// MockNamedHookable is a mock of NamedHookable interface.
type MockNamedHookable struct {
	ctrl     *gomock.Controller
	recorder *MockNamedHookableMockRecorder
	isgomock struct{}
}

// MockNamedHookableMockRecorder is the mock recorder for MockNamedHookable.
type MockNamedHookableMockRecorder struct {
	mock *MockNamedHookable
}

// NewMockNamedHookable creates a new mock instance.
func NewMockNamedHookable(ctrl *gomock.Controller) *MockNamedHookable {
	mock := &MockNamedHookable{ctrl: ctrl}
	mock.recorder = &MockNamedHookableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamedHookable) EXPECT() *MockNamedHookableMockRecorder {
	return m.recorder
}

// AcceptHook mocks base method.
func (m *MockNamedHookable) AcceptHook(hook sim.Hook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AcceptHook", hook)
}

// AcceptHook indicates an expected call of AcceptHook.
func (mr *MockNamedHookableMockRecorder) AcceptHook(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptHook", reflect.TypeOf((*MockNamedHookable)(nil).AcceptHook), hook)
}

// Hooks mocks base method.
func (m *MockNamedHookable) Hooks() []sim.Hook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hooks")
	ret0, _ := ret[0].([]sim.Hook)
	return ret0
}

// Hooks indicates an expected call of Hooks.
func (mr *MockNamedHookableMockRecorder) Hooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hooks", reflect.TypeOf((*MockNamedHookable)(nil).Hooks))
}

// InvokeHook mocks base method.
func (m *MockNamedHookable) InvokeHook(arg0 sim.HookCtx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvokeHook", arg0)
}

// InvokeHook indicates an expected call of InvokeHook.
func (mr *MockNamedHookableMockRecorder) InvokeHook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeHook", reflect.TypeOf((*MockNamedHookable)(nil).InvokeHook), arg0)
}

// Name mocks base method.
func (m *MockNamedHookable) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockNamedHookableMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNamedHookable)(nil).Name))
}

// NumHooks mocks base method.
func (m *MockNamedHookable) NumHooks() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumHooks")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumHooks indicates an expected call of NumHooks.
func (mr *MockNamedHookableMockRecorder) NumHooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumHooks", reflect.TypeOf((*MockNamedHookable)(nil).NumHooks))
}
