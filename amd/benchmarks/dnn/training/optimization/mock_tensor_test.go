// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/mgpusim/v4/amd/benchmarks/dnn/tensor (interfaces: Tensor,Operator)
//
// Generated by this command:
//
//	mockgen -destination mock_tensor_test.go -package optimization -write_package_comment=false github.com/sarchlab/mgpusim/v4/amd/benchmarks/dnn/tensor Tensor,Operator
//

package optimization

import (
	reflect "reflect"

	tensor "github.com/sarchlab/mgpusim/v4/amd/benchmarks/dnn/tensor"
	gomock "go.uber.org/mock/gomock"
)

// MockTensor is a mock of Tensor interface.
type MockTensor struct {
	ctrl     *gomock.Controller
	recorder *MockTensorMockRecorder
	isgomock struct{}
}

// MockTensorMockRecorder is the mock recorder for MockTensor.
type MockTensorMockRecorder struct {
	mock *MockTensor
}

// NewMockTensor creates a new mock instance.
func NewMockTensor(ctrl *gomock.Controller) *MockTensor {
	mock := &MockTensor{ctrl: ctrl}
	mock.recorder = &MockTensorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTensor) EXPECT() *MockTensorMockRecorder {
	return m.recorder
}

// Descriptor mocks base method.
func (m *MockTensor) Descriptor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Descriptor")
	ret0, _ := ret[0].(string)
	return ret0
}

// Descriptor indicates an expected call of Descriptor.
func (mr *MockTensorMockRecorder) Descriptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Descriptor", reflect.TypeOf((*MockTensor)(nil).Descriptor))
}

// Dim mocks base method.
func (m *MockTensor) Dim() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dim")
	ret0, _ := ret[0].(int)
	return ret0
}

// Dim indicates an expected call of Dim.
func (mr *MockTensorMockRecorder) Dim() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dim", reflect.TypeOf((*MockTensor)(nil).Dim))
}

// NumElement mocks base method.
func (m *MockTensor) NumElement() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumElement")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumElement indicates an expected call of NumElement.
func (mr *MockTensorMockRecorder) NumElement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumElement", reflect.TypeOf((*MockTensor)(nil).NumElement))
}

// SetDescriptor mocks base method.
func (m *MockTensor) SetDescriptor(d string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDescriptor", d)
}

// SetDescriptor indicates an expected call of SetDescriptor.
func (mr *MockTensorMockRecorder) SetDescriptor(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDescriptor", reflect.TypeOf((*MockTensor)(nil).SetDescriptor), d)
}

// SetSize mocks base method.
func (m *MockTensor) SetSize(arg0 []int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSize", arg0)
}

// SetSize indicates an expected call of SetSize.
func (mr *MockTensorMockRecorder) SetSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSize", reflect.TypeOf((*MockTensor)(nil).SetSize), arg0)
}

// Size mocks base method.
func (m *MockTensor) Size() []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].([]int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockTensorMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockTensor)(nil).Size))
}

// Vector mocks base method.
func (m *MockTensor) Vector() []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vector")
	ret0, _ := ret[0].([]float64)
	return ret0
}

// Vector indicates an expected call of Vector.
func (mr *MockTensorMockRecorder) Vector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vector", reflect.TypeOf((*MockTensor)(nil).Vector))
}

// MockOperator is a mock of Operator interface.
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorMockRecorder
	isgomock struct{}
}

// MockOperatorMockRecorder is the mock recorder for MockOperator.
type MockOperatorMockRecorder struct {
	mock *MockOperator
}

// NewMockOperator creates a new mock instance.
func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &MockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperator) EXPECT() *MockOperatorMockRecorder {
	return m.recorder
}

// Adam mocks base method.
func (m *MockOperator) Adam(params, gradients, vHistory, sHistory tensor.Tensor, smoothFactor1, smoothFactor2, learningRate float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Adam", params, gradients, vHistory, sHistory, smoothFactor1, smoothFactor2, learningRate)
}

// Adam indicates an expected call of Adam.
func (mr *MockOperatorMockRecorder) Adam(params, gradients, vHistory, sHistory, smoothFactor1, smoothFactor2, learningRate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Adam", reflect.TypeOf((*MockOperator)(nil).Adam), params, gradients, vHistory, sHistory, smoothFactor1, smoothFactor2, learningRate)
}

// AvgPoolingBackward mocks base method.
func (m *MockOperator) AvgPoolingBackward(forwardIn, backwardIn tensor.Tensor, kernelSize, padding, stride []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvgPoolingBackward", forwardIn, backwardIn, kernelSize, padding, stride)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// AvgPoolingBackward indicates an expected call of AvgPoolingBackward.
func (mr *MockOperatorMockRecorder) AvgPoolingBackward(forwardIn, backwardIn, kernelSize, padding, stride any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvgPoolingBackward", reflect.TypeOf((*MockOperator)(nil).AvgPoolingBackward), forwardIn, backwardIn, kernelSize, padding, stride)
}

// AvgPoolingForward mocks base method.
func (m *MockOperator) AvgPoolingForward(t tensor.Tensor, kernelSize, padding, stride []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvgPoolingForward", t, kernelSize, padding, stride)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// AvgPoolingForward indicates an expected call of AvgPoolingForward.
func (mr *MockOperatorMockRecorder) AvgPoolingForward(t, kernelSize, padding, stride any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvgPoolingForward", reflect.TypeOf((*MockOperator)(nil).AvgPoolingForward), t, kernelSize, padding, stride)
}

// Clear mocks base method.
func (m *MockOperator) Clear(t tensor.Tensor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", t)
}

// Clear indicates an expected call of Clear.
func (mr *MockOperatorMockRecorder) Clear(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockOperator)(nil).Clear), t)
}

// Clone mocks base method.
func (m *MockOperator) Clone(t tensor.Tensor) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", t)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockOperatorMockRecorder) Clone(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockOperator)(nil).Clone), t)
}

// Copy mocks base method.
func (m *MockOperator) Copy(dst, src tensor.Tensor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Copy", dst, src)
}

// Copy indicates an expected call of Copy.
func (mr *MockOperatorMockRecorder) Copy(dst, src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockOperator)(nil).Copy), dst, src)
}

// Create mocks base method.
func (m *MockOperator) Create(size []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", size)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOperatorMockRecorder) Create(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOperator)(nil).Create), size)
}

// CreateWithData mocks base method.
func (m *MockOperator) CreateWithData(data []float64, size []int, descriptor string) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithData", data, size, descriptor)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// CreateWithData indicates an expected call of CreateWithData.
func (mr *MockOperatorMockRecorder) CreateWithData(data, size, descriptor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithData", reflect.TypeOf((*MockOperator)(nil).CreateWithData), data, size, descriptor)
}

// CrossEntropy mocks base method.
func (m *MockOperator) CrossEntropy(t tensor.Tensor, label []int) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrossEntropy", t, label)
	ret0, _ := ret[0].(float64)
	return ret0
}

// CrossEntropy indicates an expected call of CrossEntropy.
func (mr *MockOperatorMockRecorder) CrossEntropy(t, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrossEntropy", reflect.TypeOf((*MockOperator)(nil).CrossEntropy), t, label)
}

// CrossEntropyDerivative mocks base method.
func (m *MockOperator) CrossEntropyDerivative(t tensor.Tensor, label []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrossEntropyDerivative", t, label)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// CrossEntropyDerivative indicates an expected call of CrossEntropyDerivative.
func (mr *MockOperatorMockRecorder) CrossEntropyDerivative(t, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrossEntropyDerivative", reflect.TypeOf((*MockOperator)(nil).CrossEntropyDerivative), t, label)
}

// Dilate mocks base method.
func (m *MockOperator) Dilate(t tensor.Tensor, dilate []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dilate", t, dilate)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Dilate indicates an expected call of Dilate.
func (mr *MockOperatorMockRecorder) Dilate(t, dilate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dilate", reflect.TypeOf((*MockOperator)(nil).Dilate), t, dilate)
}

// Dump mocks base method.
func (m *MockOperator) Dump(t tensor.Tensor) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", t)
	ret0, _ := ret[0].(string)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockOperatorMockRecorder) Dump(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockOperator)(nil).Dump), t)
}

// ElementWiseMul mocks base method.
func (m *MockOperator) ElementWiseMul(t1, t2 tensor.Tensor) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ElementWiseMul", t1, t2)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// ElementWiseMul indicates an expected call of ElementWiseMul.
func (mr *MockOperatorMockRecorder) ElementWiseMul(t1, t2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ElementWiseMul", reflect.TypeOf((*MockOperator)(nil).ElementWiseMul), t1, t2)
}

// Free mocks base method.
func (m *MockOperator) Free(t tensor.Tensor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free", t)
}

// Free indicates an expected call of Free.
func (mr *MockOperatorMockRecorder) Free(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockOperator)(nil).Free), t)
}

// Gemm mocks base method.
func (m *MockOperator) Gemm(transA, transB bool, alpha, beta float64, a, b, c tensor.Tensor) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gemm", transA, transB, alpha, beta, a, b, c)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Gemm indicates an expected call of Gemm.
func (mr *MockOperatorMockRecorder) Gemm(transA, transB, alpha, beta, a, b, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gemm", reflect.TypeOf((*MockOperator)(nil).Gemm), transA, transB, alpha, beta, a, b, c)
}

// Im2Col mocks base method.
func (m *MockOperator) Im2Col(t tensor.Tensor, kernelSize, padding, stride, dilation []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Im2Col", t, kernelSize, padding, stride, dilation)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Im2Col indicates an expected call of Im2Col.
func (mr *MockOperatorMockRecorder) Im2Col(t, kernelSize, padding, stride, dilation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Im2Col", reflect.TypeOf((*MockOperator)(nil).Im2Col), t, kernelSize, padding, stride, dilation)
}

// Init mocks base method.
func (m *MockOperator) Init(t tensor.Tensor, data []float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", t, data)
}

// Init indicates an expected call of Init.
func (mr *MockOperatorMockRecorder) Init(t, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockOperator)(nil).Init), t, data)
}

// MaxPoolingBackward mocks base method.
func (m *MockOperator) MaxPoolingBackward(forwardIn, backwardIn, mask tensor.Tensor, kernelSize, padding, stride []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxPoolingBackward", forwardIn, backwardIn, mask, kernelSize, padding, stride)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// MaxPoolingBackward indicates an expected call of MaxPoolingBackward.
func (mr *MockOperatorMockRecorder) MaxPoolingBackward(forwardIn, backwardIn, mask, kernelSize, padding, stride any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxPoolingBackward", reflect.TypeOf((*MockOperator)(nil).MaxPoolingBackward), forwardIn, backwardIn, mask, kernelSize, padding, stride)
}

// MaxPoolingForward mocks base method.
func (m *MockOperator) MaxPoolingForward(t tensor.Tensor, kernelSize, padding, stride []int) (tensor.Tensor, tensor.Tensor) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxPoolingForward", t, kernelSize, padding, stride)
	ret0, _ := ret[0].(tensor.Tensor)
	ret1, _ := ret[1].(tensor.Tensor)
	return ret0, ret1
}

// MaxPoolingForward indicates an expected call of MaxPoolingForward.
func (mr *MockOperatorMockRecorder) MaxPoolingForward(t, kernelSize, padding, stride any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxPoolingForward", reflect.TypeOf((*MockOperator)(nil).MaxPoolingForward), t, kernelSize, padding, stride)
}

// RMSProp mocks base method.
func (m *MockOperator) RMSProp(params, gradient, sHistory tensor.Tensor, smoothFactor, learningRate float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RMSProp", params, gradient, sHistory, smoothFactor, learningRate)
}

// RMSProp indicates an expected call of RMSProp.
func (mr *MockOperatorMockRecorder) RMSProp(params, gradient, sHistory, smoothFactor, learningRate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMSProp", reflect.TypeOf((*MockOperator)(nil).RMSProp), params, gradient, sHistory, smoothFactor, learningRate)
}

// ReluBackward mocks base method.
func (m *MockOperator) ReluBackward(forwardIn, backwardIn tensor.Tensor) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReluBackward", forwardIn, backwardIn)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// ReluBackward indicates an expected call of ReluBackward.
func (mr *MockOperatorMockRecorder) ReluBackward(forwardIn, backwardIn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReluBackward", reflect.TypeOf((*MockOperator)(nil).ReluBackward), forwardIn, backwardIn)
}

// ReluForward mocks base method.
func (m *MockOperator) ReluForward(in tensor.Tensor) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReluForward", in)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// ReluForward indicates an expected call of ReluForward.
func (mr *MockOperatorMockRecorder) ReluForward(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReluForward", reflect.TypeOf((*MockOperator)(nil).ReluForward), in)
}

// Repeat mocks base method.
func (m *MockOperator) Repeat(t tensor.Tensor, times int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repeat", t, times)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Repeat indicates an expected call of Repeat.
func (mr *MockOperatorMockRecorder) Repeat(t, times any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repeat", reflect.TypeOf((*MockOperator)(nil).Repeat), t, times)
}

// Reshape mocks base method.
func (m *MockOperator) Reshape(t tensor.Tensor, newSize []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reshape", t, newSize)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Reshape indicates an expected call of Reshape.
func (mr *MockOperatorMockRecorder) Reshape(t, newSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reshape", reflect.TypeOf((*MockOperator)(nil).Reshape), t, newSize)
}

// Rotate180 mocks base method.
func (m *MockOperator) Rotate180(t tensor.Tensor) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rotate180", t)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Rotate180 indicates an expected call of Rotate180.
func (mr *MockOperatorMockRecorder) Rotate180(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rotate180", reflect.TypeOf((*MockOperator)(nil).Rotate180), t)
}

// ScaleAdd mocks base method.
func (m *MockOperator) ScaleAdd(alpha, beta float64, a, b tensor.Tensor) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleAdd", alpha, beta, a, b)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// ScaleAdd indicates an expected call of ScaleAdd.
func (mr *MockOperatorMockRecorder) ScaleAdd(alpha, beta, a, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleAdd", reflect.TypeOf((*MockOperator)(nil).ScaleAdd), alpha, beta, a, b)
}

// Slice mocks base method.
func (m *MockOperator) Slice(t tensor.Tensor, start, end int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slice", t, start, end)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Slice indicates an expected call of Slice.
func (mr *MockOperatorMockRecorder) Slice(t, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slice", reflect.TypeOf((*MockOperator)(nil).Slice), t, start, end)
}

// Softmax mocks base method.
func (m *MockOperator) Softmax(t tensor.Tensor) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Softmax", t)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Softmax indicates an expected call of Softmax.
func (mr *MockOperatorMockRecorder) Softmax(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Softmax", reflect.TypeOf((*MockOperator)(nil).Softmax), t)
}

// SoftmaxCrossEntropyDerivative mocks base method.
func (m *MockOperator) SoftmaxCrossEntropyDerivative(t tensor.Tensor, label []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftmaxCrossEntropyDerivative", t, label)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// SoftmaxCrossEntropyDerivative indicates an expected call of SoftmaxCrossEntropyDerivative.
func (mr *MockOperatorMockRecorder) SoftmaxCrossEntropyDerivative(t, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftmaxCrossEntropyDerivative", reflect.TypeOf((*MockOperator)(nil).SoftmaxCrossEntropyDerivative), t, label)
}

// Sum mocks base method.
func (m *MockOperator) Sum(t tensor.Tensor, axis []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sum", t, axis)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Sum indicates an expected call of Sum.
func (mr *MockOperatorMockRecorder) Sum(t, axis any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sum", reflect.TypeOf((*MockOperator)(nil).Sum), t, axis)
}

// Transpose mocks base method.
func (m *MockOperator) Transpose(t tensor.Tensor, order []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transpose", t, order)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Transpose indicates an expected call of Transpose.
func (mr *MockOperatorMockRecorder) Transpose(t, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transpose", reflect.TypeOf((*MockOperator)(nil).Transpose), t, order)
}

// Zeros mocks base method.
func (m *MockOperator) Zeros(size []int) tensor.Tensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zeros", size)
	ret0, _ := ret[0].(tensor.Tensor)
	return ret0
}

// Zeros indicates an expected call of Zeros.
func (mr *MockOperatorMockRecorder) Zeros(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zeros", reflect.TypeOf((*MockOperator)(nil).Zeros), size)
}
