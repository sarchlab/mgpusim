// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/mgpusim/v4/amd/benchmarks/dnn/training (interfaces: LossFunction,DataSource)
//
// Generated by this command:
//
//	mockgen -destination mock_training_test.go -package training -self_package training -write_package_comment=false github.com/sarchlab/mgpusim/v4/amd/benchmarks/dnn/training LossFunction,DataSource
//

package training

import (
	reflect "reflect"

	tensor "github.com/sarchlab/mgpusim/v4/amd/benchmarks/dnn/tensor"
	gomock "go.uber.org/mock/gomock"
)

// MockLossFunction is a mock of LossFunction interface.
type MockLossFunction struct {
	ctrl     *gomock.Controller
	recorder *MockLossFunctionMockRecorder
	isgomock struct{}
}

// MockLossFunctionMockRecorder is the mock recorder for MockLossFunction.
type MockLossFunctionMockRecorder struct {
	mock *MockLossFunction
}

// NewMockLossFunction creates a new mock instance.
func NewMockLossFunction(ctrl *gomock.Controller) *MockLossFunction {
	mock := &MockLossFunction{ctrl: ctrl}
	mock.recorder = &MockLossFunctionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLossFunction) EXPECT() *MockLossFunctionMockRecorder {
	return m.recorder
}

// Loss mocks base method.
func (m *MockLossFunction) Loss(output tensor.Tensor, label []int) (float64, tensor.Tensor) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Loss", output, label)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(tensor.Tensor)
	return ret0, ret1
}

// Loss indicates an expected call of Loss.
func (mr *MockLossFunctionMockRecorder) Loss(output, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loss", reflect.TypeOf((*MockLossFunction)(nil).Loss), output, label)
}

// MockDataSource is a mock of DataSource interface.
type MockDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceMockRecorder
	isgomock struct{}
}

// MockDataSourceMockRecorder is the mock recorder for MockDataSource.
type MockDataSourceMockRecorder struct {
	mock *MockDataSource
}

// NewMockDataSource creates a new mock instance.
func NewMockDataSource(ctrl *gomock.Controller) *MockDataSource {
	mock := &MockDataSource{ctrl: ctrl}
	mock.recorder = &MockDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSource) EXPECT() *MockDataSourceMockRecorder {
	return m.recorder
}

// NextBatch mocks base method.
func (m *MockDataSource) NextBatch(batchSize int) (tensor.Tensor, []int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextBatch", batchSize)
	ret0, _ := ret[0].(tensor.Tensor)
	ret1, _ := ret[1].([]int)
	return ret0, ret1
}

// NextBatch indicates an expected call of NextBatch.
func (mr *MockDataSourceMockRecorder) NextBatch(batchSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextBatch", reflect.TypeOf((*MockDataSource)(nil).NextBatch), batchSize)
}

// Rewind mocks base method.
func (m *MockDataSource) Rewind() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rewind")
}

// Rewind indicates an expected call of Rewind.
func (mr *MockDataSourceMockRecorder) Rewind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rewind", reflect.TypeOf((*MockDataSource)(nil).Rewind))
}
