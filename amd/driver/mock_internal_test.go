// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/mgpusim/v4/amd/driver/internal (interfaces: MemoryAllocator)
//
// Generated by this command:
//
//	mockgen -destination mock_internal_test.go -package driver -write_package_comment=false github.com/sarchlab/mgpusim/v4/amd/driver/internal MemoryAllocator
//

package driver

import (
	reflect "reflect"

	vm "github.com/sarchlab/akita/v4/mem/vm"
	internal "github.com/sarchlab/mgpusim/v4/amd/driver/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockMemoryAllocator is a mock of MemoryAllocator interface.
type MockMemoryAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryAllocatorMockRecorder
	isgomock struct{}
}

// MockMemoryAllocatorMockRecorder is the mock recorder for MockMemoryAllocator.
type MockMemoryAllocatorMockRecorder struct {
	mock *MockMemoryAllocator
}

// NewMockMemoryAllocator creates a new mock instance.
func NewMockMemoryAllocator(ctrl *gomock.Controller) *MockMemoryAllocator {
	mock := &MockMemoryAllocator{ctrl: ctrl}
	mock.recorder = &MockMemoryAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoryAllocator) EXPECT() *MockMemoryAllocatorMockRecorder {
	return m.recorder
}

// Allocate mocks base method.
func (m *MockMemoryAllocator) Allocate(pid vm.PID, byteSize uint64, deviceID int) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", pid, byteSize, deviceID)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Allocate indicates an expected call of Allocate.
func (mr *MockMemoryAllocatorMockRecorder) Allocate(pid, byteSize, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockMemoryAllocator)(nil).Allocate), pid, byteSize, deviceID)
}

// AllocatePageWithGivenVAddr mocks base method.
func (m *MockMemoryAllocator) AllocatePageWithGivenVAddr(pid vm.PID, deviceID int, vAddr uint64, unified bool) vm.Page {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePageWithGivenVAddr", pid, deviceID, vAddr, unified)
	ret0, _ := ret[0].(vm.Page)
	return ret0
}

// AllocatePageWithGivenVAddr indicates an expected call of AllocatePageWithGivenVAddr.
func (mr *MockMemoryAllocatorMockRecorder) AllocatePageWithGivenVAddr(pid, deviceID, vAddr, unified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePageWithGivenVAddr", reflect.TypeOf((*MockMemoryAllocator)(nil).AllocatePageWithGivenVAddr), pid, deviceID, vAddr, unified)
}

// AllocateUnified mocks base method.
func (m *MockMemoryAllocator) AllocateUnified(pid vm.PID, byteSize uint64) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateUnified", pid, byteSize)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// AllocateUnified indicates an expected call of AllocateUnified.
func (mr *MockMemoryAllocatorMockRecorder) AllocateUnified(pid, byteSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateUnified", reflect.TypeOf((*MockMemoryAllocator)(nil).AllocateUnified), pid, byteSize)
}

// Free mocks base method.
func (m *MockMemoryAllocator) Free(vAddr uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free", vAddr)
}

// Free indicates an expected call of Free.
func (mr *MockMemoryAllocatorMockRecorder) Free(vAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockMemoryAllocator)(nil).Free), vAddr)
}

// GetDeviceIDByPAddr mocks base method.
func (m *MockMemoryAllocator) GetDeviceIDByPAddr(pAddr uint64) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceIDByPAddr", pAddr)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDeviceIDByPAddr indicates an expected call of GetDeviceIDByPAddr.
func (mr *MockMemoryAllocatorMockRecorder) GetDeviceIDByPAddr(pAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceIDByPAddr", reflect.TypeOf((*MockMemoryAllocator)(nil).GetDeviceIDByPAddr), pAddr)
}

// RegisterDevice mocks base method.
func (m *MockMemoryAllocator) RegisterDevice(device *internal.Device) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterDevice", device)
}

// RegisterDevice indicates an expected call of RegisterDevice.
func (mr *MockMemoryAllocatorMockRecorder) RegisterDevice(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDevice", reflect.TypeOf((*MockMemoryAllocator)(nil).RegisterDevice), device)
}

// Remap mocks base method.
func (m *MockMemoryAllocator) Remap(pid vm.PID, pageVAddr, byteSize uint64, deviceID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remap", pid, pageVAddr, byteSize, deviceID)
}

// Remap indicates an expected call of Remap.
func (mr *MockMemoryAllocatorMockRecorder) Remap(pid, pageVAddr, byteSize, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remap", reflect.TypeOf((*MockMemoryAllocator)(nil).Remap), pid, pageVAddr, byteSize, deviceID)
}

// RemovePage mocks base method.
func (m *MockMemoryAllocator) RemovePage(vAddr uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePage", vAddr)
}

// RemovePage indicates an expected call of RemovePage.
func (mr *MockMemoryAllocatorMockRecorder) RemovePage(vAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePage", reflect.TypeOf((*MockMemoryAllocator)(nil).RemovePage), vAddr)
}
